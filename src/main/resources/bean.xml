<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop = "http://www.springframework.org/schema/aop"
       xmlns:tx = "http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd">


    <aop:aspectj-autoproxy/>

    <context:annotation-config></context:annotation-config>
    <context:component-scan base-package="com.example"></context:component-scan>

    <!--事务管理-->
    <bean id="txManager" class="org.springframework.orm.hibernate5.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>

    <tx:annotation-driven transaction-manager="txManager"/>

    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="${jdbc.driverClassName}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>

    <context:property-placeholder location="jdbc.properties"/>

    <!--<bean id="myDataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">-->
        <!--<property name="driverClassName" value="org.hsqldb.jdbcDriver"/>-->
        <!--<property name="url" value="jdbc:hsqldb:hsql://localhost:9001"/>-->
        <!--<property name="username" value="root"/>-->
        <!--<property name="password" value=""/>-->
    <!--</bean>-->

    <bean id="sessionFactory" class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="packagesToScan">
            <list>
                <value>com.example.model</value>
            </list>
        </property>
        <!--<property name="annotatedClasses">-->
            <!--<list>-->
                <!--<value>com.example.model.User</value>-->
                <!--<value>com.example.model.Log</value>-->
            <!--</list>-->
        <!--</property>-->
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">
                    org.hibernate.dialect.HSQLDialect
                </prop>
                <prop key="hibernate.show_sql">
                    true
                </prop>
            </props>
        </property>
    </bean>

    <!--使用xml进行声明式事务管理-->
    <tx:advice id="txAdvice" transaction-manager="txManager">
        <tx:attributes>
            <tx:method name="getUser" read-only="true"/>
            <tx:method name="add*" propagation="REQUIRED"/>
        </tx:attributes>
    </tx:advice>

    <bean id="hibernateTemplate" class="org.springframework.orm.hibernate5.HibernateTemplate">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>

    <bean id="abstractDAO" class="com.example.impl.AbstractDAO">
        <property name="hibernateTemplate" ref="hibernateTemplate"/>
    </bean>

    <!--aop的xml方法-->
     <bean name="logInterceptorAop" class="com.example.aop.LogInterceptorAop"></bean>

    <aop:config>
        <aop:pointcut id="servicePointcut" expression="execution(public * com.example.service..*.add(..))"></aop:pointcut>

        <!--使用xml进行声明式事务管理-->
        <aop:advisor advice-ref="txAdvice" pointcut-ref="servicePointcut"/>

        <aop:aspect id="logAspect" ref="logInterceptorAop" >
            <aop:before method="beforeMethod" pointcut-ref = "servicePointcut"></aop:before>

            <!--<aop:before method="beforeMethod" pointcut="execution(public * com.example.service..*.add(..))"></aop:before>-->

            <aop:after method="afterMethod" pointcut-ref="servicePointcut"></aop:after>
            <aop:after-throwing method="throwMethod" pointcut-ref="servicePointcut"></aop:after-throwing>
        </aop:aspect>
    </aop:config>

    <!--aop的xml方法-->


    <!--&lt;!&ndash;id name都可以&ndash;&gt;-->
    <!--<bean name = "userDAO" class = "com.example.impl.UserDAOImpl">-->
        <!--&lt;!&ndash;把简单属性配在程序里&ndash;&gt;-->
        <!--<property name="daoId" value="1"></property>-->
        <!--<property name="daoStatus" value="normal"></property>-->

        <!--&lt;!&ndash;集合注入&ndash;&gt;-->
        <!--<property name="sets">-->
            <!--<set>-->
                <!--<value>1</value>-->
                <!--<value>2</value>-->
            <!--</set>-->
        <!--</property>-->
        <!--<property name="map">-->
            <!--<map>-->
                <!--<entry key="1" value="1"></entry>-->
                <!--<entry key="2" value="2"></entry>-->
                <!--<entry key="3" value="3"></entry>-->
            <!--</map>-->
        <!--</property>-->
        <!--<property name="list">-->
            <!--<list>-->
                <!--<value>1</value>-->
                <!--<value>2</value>-->
            <!--</list>-->
        <!--</property>-->
    <!--</bean>-->


    <!--<bean name = "userDAO" class = "com.example.impl.UserDAOImpl"></bean>-->

    <!--<bean name = "userService" class = "com.example.service.UserService" lazy-init="true" init-method="initial"-->
       <!--destroy-method="destroy" >-->
        <!--&lt;!&ndash;<constructor-arg ref="userDAO">&ndash;&gt;-->
        <!--&lt;!&ndash;</constructor-arg>&ndash;&gt;-->
        <!--&lt;!&ndash;<property name ="UserDAO"  ref="userDAO">&ndash;&gt;-->
        <!--&lt;!&ndash;</property>&ndash;&gt;-->
    <!--</bean>-->

</beans>

